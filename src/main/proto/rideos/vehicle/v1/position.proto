/*
 * Copyright 2018-2019 rideOS, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package rideos.vehicle.v1;
option java_package = "ai.rideos.api.vehicle.v1";
option java_outer_classname = "PositionProto";

import "rideos/geo/v1/geo.proto";
import "rideos/timestamp/v1/timestamp.proto";

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// VehiclePositionService
//
// The VehiclePositionService provides ways to set and access vehicle position and heading
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

service VehiclePositionService {
    // Sets the last known position of a vehicle
    rpc SetVehiclePosition (SetVehiclePositionRequest) returns (SetVehiclePositionResponse);

    // Temporary unary RPC. Will be removed soon
    rpc SetVehiclePositionUnary (SetVehiclePositionRequest) returns (SetVehiclePositionResponse);

    // Returns the last known position and heading of the specified vehicle
    rpc GetLatestVehiclePosition (GetLatestVehiclePositionRequest) returns (GetLatestVehiclePositionResponse);

    // Returns the last known position and heading of all vehicles in a specified region
    rpc GetVehiclesInArea (GetVehiclesInAreaRequest) returns (GetVehiclesInAreaResponse);
}

message SetVehiclePositionRequest {
    // The customer-specified ID of the vehicle. Should be unique in the customer's fleet
    string vehicle_id = 1;

    // Time at which the state is valid
    timestamp.v1.Timestamp time_of_validity = 2;

    // Position of the vehicle
    geo.v1.Position position = 3;

    // Formerly heading_deg_cw_from_true_north
    reserved 4;

    // Optional but recommended
    geo.v1.Heading heading = 5;
}

message SetVehiclePositionResponse {
    // Status of the request
    Status status = 1;

    enum Status {
        UNKNOWN = 0;
        SUCCESS = 1;
    }
}

message GetLatestVehiclePositionRequest {
    // The customer-specified ID of the vehicle. Should be unique In the customer's fleet
    string vehicle_id = 1;
}

message GetLatestVehiclePositionResponse {
    // Status of the request
    Status status = 1;

    // Time at which the state is valid
    timestamp.v1.Timestamp time_of_validity = 2;

    // Position of the vehicle
    geo.v1.Position position = 3;

    // Formerly heading_deg_cw_from_true_north
    reserved 4;

    geo.v1.Heading heading = 5;

    enum Status {
        UNKNOWN = 0;
        SUCCESS = 1;
        NOT_FOUND = 2;
    }
}

message GetVehiclesInAreaRequest {
    // The area in which to return all the vehicles whose time_of_validity is newer than max_age_milliseconds
    geo.v1.Circle area = 1;

    // The oldest time_of_validity allowed (i.e. no vehicles with time_of_validity older than this value will be
    // returned)
    timestamp.v1.Timestamp oldest_time_of_validity = 2;

    // Maximum number of vehicles to return
    int32 max_vehicles = 3;
}

message GetVehiclesInAreaResponse {
    // Status of the request
    Status status = 1;

    repeated VehicleExtendedPosition vehicles = 2;

    message VehicleExtendedPosition {
        // The customer-specified ID of the vehicle
        string vehicle_id = 1;

        // Time at which the state is valid
        timestamp.v1.Timestamp time_of_validity = 2;

        // Position of the vehicle
        geo.v1.Position position = 3;

        // Formerly heading_deg_cw_from_true_north
        reserved 4;

        geo.v1.Heading heading = 5;
    }

    enum Status {
        UNKNOWN = 0;
        SUCCESS = 1;
    }
}
