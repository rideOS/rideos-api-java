/*
 * Copyright 2018-2019 rideOS, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package rideos.fleet.v2;
option java_package = "ai.rideos.api.fleet.v2";
option java_outer_classname = "PlanProto";

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";


import "google/api/gapi_annotations.proto";
import "grpc/gateway/protoc-gen-swagger/options/swagger_annotations.proto";
import "rideos/geo/v1/geo.proto";

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// FleetPlanService
//
// The FleetPlanService provides a way to retrieve recommendations about which Tasks each vehicle in a fleet should
// service, and in what order it should service them.
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
    info: {
        title: "Fleet Planner API"
        version: "2.0"
    }
    responses: {
        key: "400"
        value: {
            description: "The request was invalid.";
        }
    }
    responses: {
        key: "401"
        value: {
            description: "The request was not correctly authorized. Please ensure you passed in the correct API Key.";
        }
    }
    responses: {
        key: "429"
        value: {
            description: "The rate limit was exceeded, please try again.";
        }
    }
};

service FleetPlanService {
    // Creates a set of plan recommendation for a given a current set of vehicles and tasks.
    rpc GetPlan (GetPlanRequest) returns (GetPlanResponse) {
        option (google.api.http) = {
            post: "/fleet/v2/GetPlan"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            tags: "Fleet Planner API (v2)"
        };
    };
}

message GetPlanRequest {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
        json_schema: {
            required: ["vehicles", "tasks"]
        } };

    // Vehicles for which to provide plan recommendations. 
    // Map from vehicle identifier to `Vehicle` object.
    map<string, Vehicle> vehicles = 1;

    // Tasks that the vehicles should service. Should include both tasks that are reflected in the current
    // vehicle plans, as well as new tasks that need to be incorporated into vehicle plans. Map from task identifier to `Task` object.
    map<string, Task> tasks = 4;

    // If true, the inital plan may have tasks reassigned to new vehicles when doing so provides a better solution.
    bool allow_vehicle_reassignment = 5;

    // Specifies the optimization profile to use within the fleet planning algorithm.
    OptimizationProfile optimize_for = 6;

}

message GetPlanResponse {
    // Recommended plan for each vehicle.
    repeated VehiclePlanRecommendation recommendations = 1;
    // Tasks that could not be solved for.
    repeated UnresolvedTask unresolved_tasks = 2;
}

// Unresolved task
message UnresolvedTask {
    string task_id = 1;
}

// Vehicle
message Vehicle {
    // The vehicle's position.
    rideos.geo.v1.Position position = 1;

    // The vehicle's heading.
    // Measured clockwise from true North - i.e. 0 is true North, 90 is East, 180 is South, 270 is West, etc..
    google.protobuf.FloatValue heading = 2;

    // The total resource capacity in the vehicle. ex: if the vehicles are transporting passengers, this might be
    // the number of seats in the vehicle. Each Task should indicate the number of resources required - i.e. the number
    // of resources that are consumed when the vehicle completes the Task's pickup step and released when the vehicle
    // completes the Task's dropoff step.
    google.protobuf.UInt32Value resource_capacity = 3;

    // The vehicle's current plan.
    VehiclePlan current_plan = 4;

    // Identifier of the vehicle.
    string vehicle_id = 5;

    // Restrict any task insertions or swaps up to this number leg in the plan. For example, passing a value of 2
    // for this field will restrict any insertions happening in the first two legs of the plan.
    uint32 restrict_task_insertions_up_to = 6;

    RoutingConstraints routing_constraints = 7;

    message RoutingConstraints {
        // Optional: the returned plan will not require the vehicle to traverse these blacklist constraints. Blacklist
        // constraints take precedence over whitelist constraints if both are specified.
        repeated string blacklist_constraint_id = 1;

        // Optional: if provided, this list of identifiers defines a whitelist. The whitelist consists of the union of all
        // constraints listed. The returned plan will not require the vehicle to leave this whitelist. Blacklist constraints
        // take precedence over whitelist constraints if both are specified.
        repeated string whitelist_constraint_id = 2;
    }
}

// Recommendation for a vehicle
message VehiclePlanRecommendation {
    // The identifier of the vehicle for whom this recommendation applies.
    string vehicle_id = 1;

    // The plan recommendation for the vehicle.
    VehiclePlan plan_recommendation = 2;
}

// Vehicle plan
message VehiclePlan {
    // The steps to be completed, in order.
    repeated AssignedStep assigned_steps = 1;
}

// Assigned step
message AssignedStep {
    // Identifier of the corresponding Task.
    string task_id = 1;

    // Whether this AssignedStep corresponds to the pickup or dropoff step.
    StepType step_type = 2;

    // The remaining time to start the task in seconds.
    double remaining_time = 3;

    enum StepType {
        UNKNOWN = 0;
        PICKUP = 1;
        DROPOFF = 2;
    }
}

// Task
message Task {
    // The number of resources (ex: seats for passengers) that are consumed when the pickup step is completed and
    // released when the dropoff step is completed.
    google.protobuf.UInt32Value resources_required = 1;

    // The pickup step. Will always occur before the dropoff step.
    PickupStep pickup_step = 2;

    // The dropoff step. Will always occur after the pickup step.
    DropoffStep dropoff_step = 3;

    // Whether or not the task should be served as a shared or private ride. If this is set to true, the task will be
    // served by a vehicle and not pooled with other tasks.
    bool private_ride = 4;

    // Vehicles that are blacklisted by this task to prevent fleet planner from reassigning the same task to vehicles
    // that rejected it.
    repeated string blacklisted_vehicle_id = 5;

    message PickupStep {
        // The desired position at which the Step should occur.
        rideos.geo.v1.Position position = 1;

        // Optional: The heading of the street at the Step position. Used to disambiguate side-of-street.
        // Measured clockwise from true North - i.e. 0 is true North, 90 is East, 180 is South, 270 is West, etc..
        google.protobuf.FloatValue heading = 2;

        // If the PickupStep has been completed, this should equal the ID of the vehicle that completed the step.
        // If the PickupStep has not been completed, this should be omitted/empty.
        string completed_by_vehicle_id = 3;

        // Desired time window within which this step should occur.
        TimeWindow desired_service_time = 4;

        // If the pickup has not been completed yet, we will assign this task to the desired vehicle id. This is ignored
        // if the pickup has been completed.
        string desired_vehicle_id = 6;
    }

    message DropoffStep {
        // The desired position at which the Step should occur.
        rideos.geo.v1.Position position = 1;

        // Optional: The heading of the street at the Step position. Used to disambiguate side-of-street.
        // Measured clockwise from true North - i.e. 0 is true North, 90 is East, 180 is South, 270 is West, etc..
        google.protobuf.FloatValue heading = 2;

        // Desired time window within which this step should occur.
        TimeWindow desired_service_time = 3;
    }
}

// Time window
message TimeWindow {
    // The beginning of the time window.
    google.protobuf.Timestamp start = 1;

    // The end of the time window.
    google.protobuf.Timestamp end = 2;
}

// An optimization profile is used in Fleet Planner to determine the type of cost function used.
enum OptimizationProfile {
    // An optimization profile used for Ride Hail. Minimizes rider wait times and ride times.
    RIDE_HAIL = 0;
    // An optimization profile used for the goods delivery use case. Minimizes total vehicle distance.
    GOODS = 1;
}
