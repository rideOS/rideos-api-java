/*
 * Copyright 2018-2019 rideOS, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package rideos.ride_hail_driver.v1;
option java_package = "ai.rideos.api.ride_hail_driver.v1";
option objc_class_prefix = "RideHailDriver";

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

import "google/api/gapi_annotations.proto";
import "grpc/gateway/protoc-gen-swagger/options/swagger_annotations.proto";

import "rideos/geo/v1/geo.proto";
import "rideos/commons/ride_hail_commons.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
    info: {
        title: "RideHail Driver API"
        version: "1.0"
    }
    responses: {
        key: "400"
        value: {
            description: "The request was invalid.";
        }
    }
    responses: {
        key: "401"
        value: {
            description: "The request was not correctly authorized. Please ensure you passed in the correct API Key.";
        }
    }
    responses: {
        key: "403"
        value: {
            description: "Returned when the user does not have permission to access the resource.";
        }
    }
    responses: {
        key: "429"
        value: {
            description: "The rate limit was exceeded, please try again.";
        }
    }
};

message CreateVehicleRequest {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
        json_schema: {
            required: ["id", "fleetId", "definition"]
        }
    };

    // Client-provided identifier for the vehicle. This value needs to be unique per partner and cannot be reused.
    string id = 1;
    // The identifier of the fleet the vehicle will belong to. The fleet must have been created beforehand.
    string fleet_id = 2;
    // Vehicle properties relevant for trip optimization.
    ride_hail_commons.VehicleDefinition definition = 3;
    // Information about the vehicle that is not used for optimization.
    ride_hail_commons.VehicleInfo info = 4;
}

message CreateVehicleResponse {
}

message UpdateVehicleRequest {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
        json_schema: {
            required: ["id", "fleetId", "updatedVehicleInfo"]
        }
    };

    // Client-provided identifier for the vehicle. This value needs to be unique per partner and cannot be reused.
    string id = 1;
    // The identifier of the fleet the vehicle will belong to. The fleet must have been created beforehand.
    string fleet_id = 2;
    // The fields to update in the vehicle. Any field that is specified will be overwritten by the request.
    // Any field that is not specified will not be modified.
    ride_hail_commons.VehicleInfoUpdate updated_vehicle_info = 3;
}

message UpdateVehicleResponse {
}

message GetVehicleInfoRequest {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
        json_schema: {
            required: ["id"]
        }
    };

    // The identifier of the vehicle to retrieve information for.
    string id = 1;
}

message GetVehicleInfoResponse {
    // Deprecated: Old-style vehicle information.
    // Information about the vehicle that are not used for optimization.
    ride_hail_commons.VehicleInfo info = 2;
}

message GetVehicleStateRequest {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
        json_schema: {
            required: ["id"]
        }
    };

    // The partner-provided identifier of the vehicle to retrieve the state for.
    string id = 1;
}

message GetVehicleStateResponse {
    // The current state of the vehicle.
    ride_hail_commons.VehicleState state = 1;
}

message UpdateVehicleStateRequest {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
        json_schema: {
            required: ["id"]
        }
    };

    // The identifier of the vehicle to update the state for.
    string id = 1;
    oneof update_vehicle_state {
        // Mark the vehicle as available to be assigned new trips.
        SetToReady set_to_ready = 2;
        // Mark the vehicle as unavailable to be assigned new trips.
        SetToNotReady set_to_not_ready = 3;
        // Update one or more of the vehicle's route legs within its current plan.
        SetRouteLegs set_route_legs = 4;
        // Update the vehicle's current position and optionally its heading.
        UpdatePosition update_position = 5;

        OverrideRouteLegs override_route_legs = 6 [deprecated = true];
    }

    message SetToReady {
    }

    message SetToNotReady {
    }

    message SetRouteLegs {
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
            json_schema: {
                required: ["legDefinition"]
            }
        };

        // A list of route legs to set within the plan
        repeated LegDefinition leg_definition = 1;

        message LegDefinition {
            // The trip id from where the route leg originates
            string from_trip_id = 1;
            // The step id from where the route leg originates
            string from_step_id = 2;
            // The trip id where the route leg terminates
            string to_trip_id = 3;
            // The step id where the route leg terminates
            string to_step_id = 4;
            // The route leg
            ride_hail_commons.VehicleState.Step.RouteLeg route_leg = 5;
        }
    }

    message UpdatePosition {
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
            json_schema: {
                required: ["updatedPosition"]
            }
        };

        // Current position of the vehicle
        geo.v1.Position updated_position = 1;
        // Current heading of the vehicle
        google.protobuf.FloatValue updated_heading = 2;
    }

    message OverrideRouteLegs {
        option deprecated = true;
        map<string, ride_hail_commons.VehicleState.Step.RouteLeg> step_id_to_route_leg = 1;
    }
}

message UpdateVehicleStateResponse {
}

message RemoveVehicleRequest {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
        json_schema: {
            required: ["id"]
        }
    };

    // Identifier of the vehicle to remove.
    string id = 1;
}

message RemoveVehicleResponse {
}

message CompleteStepRequest {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
        json_schema: {
            required: ["vehicleId", "tripId", "stepId", "completionTime"]
        }
    };

    // Identifier of the vehicle completing the trip step.
    string vehicle_id = 1;
    // Identifier of the trip the step belongs to.
    string trip_id = 2;
    // Identifier of the step to complete.
    string step_id = 3;
    // Completion timestamp.
    google.protobuf.Timestamp completion_time = 4;
}

message CompleteStepResponse {
}

message CancelTripRequest {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
        json_schema: {
            required: ["id"]
        }
    };

    // Identifier of the trip to cancel.
    string id = 1;
    // Optional description outlining the reason for cancelling the trip.
    string description = 2;
}

message CancelTripResponse {
}

message RejectTripRequest {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
        json_schema: {
            required: ["tripId", "vehicleId"]
        }
    };

    // Identifier of the trip to cancel.
    string trip_id = 1;
    // Identifier of the vehicle that cancelled.
    string vehicle_id = 2;
    // Optional description outlining the reason for rejecting the trip.
    string description = 3;
}

message RejectTripResponse {
}

message GetTripInfoRequest {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
        json_schema: {
            required: ["id"]
        } };

    // Identifier of the trip to get information for.
    string id = 1;
}

message GetTripInfoResponse {
    // Information about the specified trip, such as rider contact information and additional properties.
    ride_hail_commons.TripInfo info = 1;
}

//////////// DEPRECATED REQUEST/RESPONSE MESSAGES BELOW ////////////

message JoinFleetRequest {
    string vehicle_id = 1;

    string fleet_id = 2;

    // Whether or not the vehicle is ready for task assignments.
    // See https://github.com/rideOS/examples/blob/master/grpc/docs/dispatch/v2/data_model_guide.md#ready-for-dispatch
    // for details
    bool ready_for_dispatch = 3;

    SetReadinessRequest.NotReadyForDispatchTaskAction not_ready_action = 4;
}

message JoinFleetResponse {
}

message SetReadinessRequest {
    enum NotReadyForDispatchTaskAction {
        DEFAULT = 0;

        // Cancel all assigned tasks
        CANCEL_ALL = 1;

        // Unassign any tasks that can be unassigned. Cancel all other tasks.
        UNASSIGN_OR_CANCEL_ALL = 2;

        // Unassign any tasks that can be unassigned. Keep all other tasks.
        UNASSIGN_OR_KEEP = 3;
    }

    // The unique vehicle ID.
    string vehicle_id = 1;

    // Whether or not the vehicle is ready for task assignments.
    // See https://github.com/rideOS/examples/blob/master/grpc/docs/dispatch/v2/data_model_guide.md#ready-for-dispatch
    // for details
    bool ready_for_dispatch = 2;

    // Optional: This field indicates what to do with all assigned tasks when the vehicle transitions to not ready for
    // dispatch. This action is applied only if "ready_for_dispatch" is false.
    NotReadyForDispatchTaskAction not_ready_action = 3;
}

message SetReadinessResponse {
}

message SetVehicleInfoRequest {
    ride_hail_commons.DeprecatedVehicleInfo vehicle_info = 1;
}

message SetVehicleInfoResponse {
}

message CalculateRouteRequest {
    string vehicle_id = 1;

    // Optional. Will calculate constrained routes for all steps in provided state.
    // If not, will query for current vehicle state.
    ride_hail_commons.VehicleState state = 2;
}

message CalculateRouteResponse {
    message CalculatedRoute {
        // Trip ID of previous step
        string from_trip_id = 1;
        // Trip ID of the step that this route is for.
        string to_trip_id = 2;
        // Step ID of previous step
        string from_step_id = 3;
        // Step ID of the step that this route is for.
        string to_step_id = 4;

        // The calculated route.
        ride_hail_commons.VehicleState.Step.RouteLeg route_leg = 5;
        // Violated constraints.
        ride_hail_commons.ViolatedConstraints violated_constraints = 6;
    }

    // Response will contain one CalculatedRoute for each step of the vehicle's current plan.
    repeated CalculatedRoute calculated_route = 1;
}

service RideHailDriverService {

    // Create a vehicle
    //
    // Adds a new vehicle to an existing fleet using a provided identifier and any additional properties.
    // Vehicle properties are immutable and vehicle identifiers cannot be reused after a vehicle has been removed.
    rpc CreateVehicle (CreateVehicleRequest) returns (CreateVehicleResponse) {
        option (google.api.http) = {
            post: "/ride-hail-driver/v1/CreateVehicle"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            tags: "RideHail Driver API (v1)"
        };
    }

    // Update a vehicle
    //
    // Updates a vehicle's mutable information
    rpc UpdateVehicle (UpdateVehicleRequest) returns (UpdateVehicleResponse) {
        option (google.api.http) = {
            post: "/ride-hail-driver/v1/UpdateVehicle"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            tags: "RideHail Driver API (v1)"
        };
    }

    // Retrieve a vehicle's information
    //
    // Retrieves information about the vehicle and its driver, such as contact information and additional properties.
    rpc GetVehicleInfo (GetVehicleInfoRequest) returns (GetVehicleInfoResponse) {
        option (google.api.http) = {
            post: "/ride-hail-driver/v1/GetVehicleInfo"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            tags: "RideHail Driver API (v1)"
        };
    }

    // Retrieve a vehicle's state
    //
    // Retrieves the vehicle current state. The response will list all the trips and trip's legs associated with the
    // vehicle, the current position and heading, and whether or not the vehicle can be assigned new trips.
    rpc GetVehicleState (GetVehicleStateRequest) returns (GetVehicleStateResponse) {
        option (google.api.http) = {
            post: "/ride-hail-driver/v1/GetVehicleState"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            tags: "RideHail Driver API (v1)"
        };
    }

    // Update a vehicle's state
    //
    // Updates the current state of the vehicle. This update can encapsulate one of the following:
    //
    // 1) Set the vehicle to a ready state (meaning new trips can be assigned to it)
    // 2) Set the vehicle to a not ready state (meaning new trips will not be assigned to it)
    // 3) Set vehicle route legs in the vehicle plan
    // 4) Update the vehicle's position and optionally its heading
    rpc UpdateVehicleState (UpdateVehicleStateRequest) returns (UpdateVehicleStateResponse) {
        option (google.api.http) = {
            post: "/ride-hail-driver/v1/UpdateVehicleState"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            tags: "RideHail Driver API (v1)"
        };
    }

    // Remove a vehicle
    //
    // Removes a vehicle with the provided identifier. A vehicle cannot be removed if it is assigned a trip.
    rpc RemoveVehicle (RemoveVehicleRequest) returns (RemoveVehicleResponse) {
        option (google.api.http) = {
            post: "/ride-hail-driver/v1/RemoveVehicle"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            tags: "RideHail Driver API (v1)"
        };
    }

    // Complete a trip step
    //
    // Should be called whenever a vehicle has completed a step of its plan.
    // For example, this needs to called whenever a vehicle picked up a passenger, or dropped a passenger off.
    rpc CompleteStep (CompleteStepRequest) returns (CompleteStepResponse) {
        option (google.api.http) = {
            post: "/ride-hail-driver/v1/CompleteStep"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            tags: "RideHail Driver API (v1)"
        };
    }

    // Cancel a trip
    //
    // Cancels a trip with the provided trip identifier.
    rpc CancelTrip (CancelTripRequest) returns (CancelTripResponse) {
        option (google.api.http) = {
            post: "/ride-hail-driver/v1/CancelTrip"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            tags: "RideHail Driver API (v1)"
        };
    }

    // Reject a trip. (Experimental)
    //
    // Unassign the trip from the rejecting vehicle. The trip will be reassigned automatically, but never to the
    // vehicle that rejected it.
    rpc RejectTrip (RejectTripRequest) returns (RejectTripResponse) {
        option (google.api.http) = {
            post: "/ride-hail-driver/v1/RejectTrip"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            tags: "RideHail Driver API (v1 - Experimental)"
        };
    }

    // Retrieve a trip's information
    //
    // Retrieves all the information for the provided trip identifier (e.g. rider contact information, pickup-dropoff
    // locations).
    rpc GetTripInfo (GetTripInfoRequest) returns (GetTripInfoResponse) {
        option (google.api.http) = {
            post: "/ride-hail-driver/v1/GetTripInfo"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            tags: "RideHail Driver API (v1)"
        };
    }

    // Calculate a route for the vehicle. (Experimental)
    //
    // Returns a rideOS-calculated route for the vehicle to complete its current Plan. This route will take into account
    // routing constraints that are set for the vehicle and/or its fleet.
    rpc CalculateRoute (CalculateRouteRequest) returns (CalculateRouteResponse) {
        option (google.api.http) = {
            post: "/ride-hail-driver/v1/CalculateRoute"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            tags: "RideHail Driver API (v1 - Experimental)"
        };
    };

    //////////// DEPRECATED METHODS BELOW ////////////

    // Have the Vehicle associate with a fleet
    rpc JoinFleet (JoinFleetRequest) returns (JoinFleetResponse) {
        option deprecated = true;
    }

    // Have the Vehicle associate with a fleet
    rpc SetReadiness (SetReadinessRequest) returns (SetReadinessResponse) {
        option deprecated = true;
    }

    rpc SetVehicleInfo (SetVehicleInfoRequest) returns (SetVehicleInfoResponse) {
        option deprecated = true;
    };
}
