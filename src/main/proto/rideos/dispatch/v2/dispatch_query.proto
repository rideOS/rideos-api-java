/*
 * Copyright 2018-2019 rideOS, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package rideos.dispatch.v2;
option java_package = "ai.rideos.api.dispatch.v2";
option objc_class_prefix = "Dispatch";

import "google/protobuf/timestamp.proto";

import "rideos/dispatch/v2/common.proto";
import "rideos/dispatch/v2/dispatch_task.proto";
import "rideos/geo/v1/geo.proto";
import "rideos/vehicle/v1/position.proto";
import "rideos/route/v1/route.proto";


message VehicleUIState {
    VehicleState state = 1;
    vehicle.v1.GetVehiclesInAreaResponse.VehicleExtendedPosition position = 2;

    // The IDs of the resources (e.g. passengers) currently carried by the vehicle.
    repeated string currently_carried_resource_id = 3;

    VehicleInfo info = 4;
}

message VehiclePreview {
    geo.v1.PositionAndHeading position_and_heading = 1;

    // ID of the preview vehicle.
    //
    // Use this only for animation purposes (to animate a vehicle moving over time). Does not necessarily correspond
    // to the vehicle ID of a real vehicle.
    string preview_id = 2;
}

message GetActiveVehiclesInAreaRequest {
    // The area in which to return all the active vehicles
    geo.v1.Circle area = 1;

    // Maximum number of vehicles to return
    int32 max_vehicles = 2;
}

message GetActiveVehiclesInFleetRequest {
    string fleet_id = 1;

    // Maximum number of vehicles to return
    int32 max_vehicles = 2;
}

message GetActiveVehiclesResponse {
    repeated VehicleUIState vehicles = 1;
}

message GetPreviewVehiclesRequest {
    string fleet_id = 1;

    // The center of the geographical area where the preview vehicles will be displayed.
    //
    // Typically, preview vehicles will be displayed on a map view, in which case this field should be set to the
    // center coordinate of the map view.
    geo.v1.Position preview_center = 2;
}

message GetPreviewVehiclesResponse {
    repeated VehiclePreview vehicles = 1;
}

message ActiveTaskInfo {
    PassengerTaskInfo passenger_task_info = 1;
    string passenger_id = 2;
    ContactInfo passenger_contact_info = 3;
}

message TaskInfo {
    PassengerTaskInfo passenger_task_info = 1;
    string passenger_id = 2;
    ContactInfo passenger_contact_info = 3;
}

message GetFleetsRequest {
}

message GetFleetsResponse {
    repeated string fleet_id = 1;
}

message GetFleetActiveTasksRequest {
    string fleet_id = 1;
}

message GetFleetActiveTasksResponse {
    repeated ActiveTaskInfo active_task_info = 1;
}

message GetFleetAllTasksRequest {
    string fleet_id = 1;

    // Only tasks that terminated after `from` (or are still active) will be returned, defaults to now.
    google.protobuf.Timestamp from = 2;

    // Only tasks that were created before `to` will be returned, by defaults to now.
    google.protobuf.Timestamp to = 3;
}

message GetFleetAllTasksResponse {
    repeated TaskInfo task_info = 1;
}

message GetFleetMetadataRequest {
    string fleet_id = 1;
}

message GetFleetMetadataResponse {
    FleetMetadata fleet_metadata = 1;
}

message SetFleetMetadataRequest {
    FleetMetadata fleet_metadata = 1;
}

message SetFleetMetadataResponse {
}

message DeleteFleetMetadataRequest {
    string fleet_id = 1;
}

message DeleteFleetMetadataResponse {
}

message GetVehicleRouteRequest {
    string vehicle_id = 1;

    // If true, the beginning of the route will be trimmed so that the route starts at the vehicle's current position.
    bool start_route_at_vehicle_position = 2;

    // If false, the route will include the vehicle's route only up to its next stop. If true, the route will continue
    // past the next stop until the vehicle's final stop.
    bool include_future_stops = 3;
}

message GetVehicleRouteResponse {
    route.v1.RouteResponse route = 1;
}

message ReoptimizePlansRequest {
    string fleet_id = 1;
}

message ReoptimizePlansResponse {
}

service DispatchQueryService {
    // Retrieve all "active" vehicles in an area, across all fleet IDs.
    //
    // The response is not filtered by fleet ID. The information returned about each vehicle includes its
    // full plan, currently assigned tasks, passengers currently in the vehicle, and so on. If this level of detail is
    // not needed or not desired (e.g. for displaying preview vehicles on a map to passengers), see the
    // GetPreviewVehicles method for an alternative.
    rpc GetActiveVehiclesInArea (GetActiveVehiclesInAreaRequest) returns (GetActiveVehiclesResponse);

    // Get info on all "active" vehicles in a given fleet ID.
    //
    // The response is not filtered by geographical location. The information returned about each vehicle includes its
    // full plan, currently assigned tasks, passengers currently in the vehicle, and so on. If this level of detail is
    // not needed or not desired (e.g. for displaying preview vehicles on a map to passengers), see the
    // GetPreviewVehicles method for an alternative.
    rpc GetActiveVehiclesInFleet (GetActiveVehiclesInFleetRequest) returns (GetActiveVehiclesResponse);

    // Preview the available vehicles in a given area and fleet ID.
    //
    // This method can be directly called from a mobile app. Call this method (rather than GetActiveVehiclesIn*) if the
    // vehicles will be displayed to an end-user.
    rpc GetPreviewVehicles (GetPreviewVehiclesRequest) returns (GetPreviewVehiclesResponse);

    // Get all the known fleet IDs.
    //
    // See the documentation on "Fleets" for more information:
    // https://github.com/rideOS/examples/blob/master/grpc/docs/dispatch/v2/data_model_guide.md#fleets
    rpc GetFleets (GetFleetsRequest) returns (GetFleetsResponse);

    // Get all "active" tasks in a fleet.
    //
    // See the documentation on "Tasks" for more information:
    // https://github.com/rideOS/examples/blob/master/grpc/docs/dispatch/v2/data_model_guide.md#task-state-transitions.
    rpc GetFleetActiveTasks (GetFleetActiveTasksRequest) returns (GetFleetActiveTasksResponse);

    // Get all tasks (even historic ones) in a fleet.
    //
    // See the documentation on "Tasks" for more information:
    // https://github.com/rideOS/examples/blob/master/grpc/docs/dispatch/v2/data_model_guide.md#task-state-transitions.
    rpc GetFleetAllTasks (GetFleetAllTasksRequest) returns (stream GetFleetAllTasksResponse);

    // Get any metadata associated with a certain fleet.
    rpc GetFleetMetadata (GetFleetMetadataRequest) returns (GetFleetMetadataResponse);

    // Set metadata to be associated with a fleet.
    rpc SetFleetMetadata (SetFleetMetadataRequest) returns (SetFleetMetadataResponse);

    // Delete metadata associated with a fleet.
    rpc DeleteFleetMetadata (DeleteFleetMetadataRequest) returns (DeleteFleetMetadataResponse);

    // Get the route that is stored for a given vehicle.
    rpc GetVehicleRoute (GetVehicleRouteRequest) returns (GetVehicleRouteResponse);

    // Reoptimizes all plans in the specified fleet.
    //
    // Call this method to force all plans and routes in the specified fleet to be recomputed. This method should be
    // called when there are constraint changes that need to be taken into account (e.g. changes to avoid areas).


    rpc ReoptimizePlans (ReoptimizePlansRequest) returns (ReoptimizePlansResponse);
}
