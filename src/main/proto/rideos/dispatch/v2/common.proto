/*
 * Copyright 2018-2019 rideOS, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package rideos.dispatch.v2;
option java_package = "ai.rideos.api.dispatch.v2";
option java_outer_classname = "Dispatch";
option objc_class_prefix = "Dispatch";

import "google/protobuf/wrappers.proto";

import "rideos/geo/v1/geo.proto";

message ContactInfo {
    string name = 1;
    string phone_number = 2;
    string contact_url = 3;
}

message TaskLocation {
    // Required: geographical position
    geo.v1.Position position = 1;
    // Optional: stop ID (opaque to dispatch engine)
    string external_stop_id = 2;
}

message Resource {
    string resource_id = 1;



    message Passengers {
        int32 num_passengers = 1;
        ContactInfo requestor_contact_info = 2;
    }

    oneof resource_type {
        Passengers passengers = 2;


    }
}

message Step {
    // Step IDs are globally unique
    string id = 1;

    TaskLocation location = 2;

    // The resource to be picked up/dropped off

    Resource resource = 3;

    // The action to take at this step (pickup, dropoff, etc.)
    Action action = 4;
    enum Action {
        UNKNOWN = 0;

        // Drive to the pickup location.
        DRIVE_TO_PICKUP = 1;

        // Load the resource (e.g. passenger) into the vehicle.
        LOAD_RESOURCE = 2;

        // Drive to the dropoff location.
        DRIVE_TO_DROPOFF = 3;
        //UNLOAD_RESOURCE = 4; // (e.g. wait for the customer to pick up the delivered food)


        RELOCATE_DRIVE = 5;
    }
}

message Waypoint {
    // ID of the corresponding Task
    string task_id = 1;

    // ID of the original Step from which the Waypoint was derived

    string step_id = 2;

    // The details of the step to complete
    Step step = 3;
}

message Plan {
    repeated Waypoint waypoints = 1;
}

message VehicleState {
    string vehicle_id = 1;
    bool ready_for_dispatch = 2;
    Plan vehicle_plan = 3;
    repeated string assigned_task_id = 4;
    int64 last_active_time_epoch_ms = 5;
    string fleet_id = 6;
    geo.v1.Position position = 7; // populated from VehiclePositionDb
    google.protobuf.FloatValue heading = 8; // populated from VehiclePositionDb
}


enum TaskStage {
    UNKNOWN = 0;
    WAITING_FOR_ASSIGNMENT = 1;
    DRIVING_TO_PICKUP = 2;
    WAITING_FOR_PICKUP = 3;
    DRIVING_TO_DROPOFF = 4;
    COMPLETED = 5;
    CANCELLED = 6;
    REPLACED = 7;
}

message CancelReason {
    enum CancelSource {
        UNKNOWN = 0;
        REQUESTOR = 1;
        VEHICLE = 2;
        INTERNAL = 3;
    }

    CancelSource source = 1;
    string description = 2;
}

message RejectReason {
    string description = 1;
}

message FleetMetadata {
    string fleet_id = 1;
    map<string, string> properties = 2;
}


message VehicleInfo {
    string vehicle_id = 1;



    string make = 2 [deprecated = true];
    string model = 3 [deprecated = true];
    VehicleColor color = 4 [deprecated = true];
    string license_plate = 5 [deprecated = true];

    int32 passenger_capacity = 6;

    // May be empty if the vehicle has no driver contact info.
    ContactInfo driver_contact_info = 7;

    enum VehicleColor {
        // Color choices from the Texas DMV's website, see
        // https://www.txdmv.gov/component/docman/doc_download/669-vehicle-color-chart?Itemid=232
        UNKNOWN = 0;
        BLUE = 1;
        PURPLE = 2;
        PINK = 3;
        RED = 4;
        MAROON = 5;
        ORANGE = 6;
        TAN = 7;
        GOLD = 8;
        YELLOW = 9;
        GREEN = 10;
        BROWN = 11;
        BEIGE = 12;
        SILVER = 13;
        GRAY = 14;
        BLACK = 15;
        WHITE = 16;
    }
}

message VehicleFilter {
    // Force the task to be dispatched to the vehicle with this vehicle id
    string vehicle_id = 1;
}
