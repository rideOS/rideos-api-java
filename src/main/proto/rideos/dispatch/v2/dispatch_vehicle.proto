/*
 * Copyright 2018-2019 rideOS, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package rideos.dispatch.v2;
option java_package = "ai.rideos.api.dispatch.v2";
option objc_class_prefix = "Dispatch";

import "rideos/dispatch/v2/common.proto";
import "rideos/geo/v1/geo.proto";
import "google/protobuf/timestamp.proto";


message JoinFleetRequest {
    // The unique vehicle ID.
    string vehicle_id = 1;

    // The unique fleet ID.
    string fleet_id = 2;

    // Whether or not the vehicle is ready for task assignments.
    // See https://github.com/rideOS/examples/blob/master/grpc/docs/dispatch/v2/data_model_guide.md#ready-for-dispatch
    // for details
    bool ready_for_dispatch = 3;
    SetReadinessRequest.NotReadyForDispatchTaskAction not_ready_action = 4;
}

message JoinFleetResponse {
}

message GetPlanForVehicleRequest {
    // The unique vehicle ID.
    string vehicle_id = 1;
}

message GetPlanForVehicleResponse {
    // The current plan for the vehicle.
    Plan plan = 1;
}

message CompleteStepRequest {
    // The unique vehicle ID.
    string vehicle_id = 1;

    // The task ID.
    string task_id = 2;

    // The step in the task ID being completing.
    string step_id = 3;

    // Optional. If non-zero, time that the step was completed. If not supplied, this defaults to the time the request
    // was received.
    int64 completion_time_epoch_ms = 4;
}

message CompleteStepResponse {
}

message SetReadinessRequest {
    enum NotReadyForDispatchTaskAction {
        DEFAULT = 0;

        // Cancel all assigned tasks
        CANCEL_ALL = 1;

        // Unassign any tasks that can be unassigned. Cancel all other tasks.
        UNASSIGN_OR_CANCEL_ALL = 2;

        // Unassign any tasks that can be unassigned. Keep all other tasks.
        UNASSIGN_OR_KEEP = 3;
    }

    // The unique vehicle ID.
    string vehicle_id = 1;

    // Whether or not the vehicle is ready for task assignments.
    // See https://github.com/rideOS/examples/blob/master/grpc/docs/dispatch/v2/data_model_guide.md#ready-for-dispatch
    // for details
    bool ready_for_dispatch = 2;

    // Optional: This field indicates what to do with all assigned tasks when the vehicle transitions to not ready for
    // dispatch. This action is applied only if "ready_for_dispatch" is false.
    NotReadyForDispatchTaskAction not_ready_action = 3;
}

message SetReadinessResponse {
}

message MarkVehicleStaleRequest {
    // The unique vehicle ID.
    string vehicle_id = 1;
}

message MarkVehicleStaleResponse {
}

message VehicleCancelTaskRequest {
    string vehicle_id = 1 [deprecated = true]; // this is unused

    // The task ID to cancel.
    string task_id = 2;

    // A reason for cancellation.
    CancelReason cancel_reason = 3;
}

message VehicleCancelTaskResponse {
}

message GetVehicleInfoRequest {
    // The unique vehicle ID.
    string vehicle_id = 1;
}

message GetVehicleInfoResponse {
    // The vehicle's information.
    VehicleInfo vehicle_info = 1;
}

message SetVehicleInfoRequest {
    // The vehicle's information.
    VehicleInfo vehicle_info = 1;
}

message SetVehicleInfoResponse {
}

message SetVehiclePositionRequest {
    // The ID of the vehicle. Should be unique in the customer's fleet.
    string vehicle_id = 1;

    // The position and heading of the vehicle.
    geo.v1.PositionAndHeading positionAndHeading = 2;

    // Time at which the vehicle's position was measured
    google.protobuf.Timestamp time_of_validity = 3;
}

message SetVehiclePositionResponse {
}

message GetVehicleStateRequest {
    string vehicle_id = 1;
}

message GetVehicleStateResponse {
    VehicleState vehicle_state = 1;
}

service DispatchVehicleService {
    // The vehicle need only call one of these RPCs to become ready. SetReadiness with ready_for_dispatch = true will
    // use the previously joined fleet (if any). JoinFleet will change the fleet the vehicle is associated with
    // (vehicles can only be in one fleet at a time).

    // Change a vehicle's fleet ID and set its readiness state.
    //
    // This method allows a vehicle to join a new fleet by simultaneously setting the fleet ID and setting the
    // ready-for-dispatch state to true. See the
    // [documentation on vehicle readiness](https://github.com/rideOS/examples/blob/master/grpc/docs/dispatch/v2/data_model_guide.md#vehicle-state)
    // and
    // [documentation on fleet IDs](https://github.com/rideOS/examples/blob/master/grpc/docs/dispatch/v2/data_model_guide.md#fleets)
    // for more information.
    rpc JoinFleet (JoinFleetRequest) returns (JoinFleetResponse);

    // Set the ready-for-dispatch state of a vehicle.
    //
    // A vehicle that is ready for dispatch will be able to receive new task assignments. See the
    // [documentation on vehicle readiness](https://github.com/rideOS/examples/blob/master/grpc/docs/dispatch/v2/data_model_guide.md#vehicle-state)
    // for more information.
    rpc SetReadiness (SetReadinessRequest) returns (SetReadinessResponse);

    // Mark a vehicle as stale.
    //
    // It is recommended to call this method immediately before a vehicle powers off. The vehicle must have an empty
    // Plan when this method is called. See the
    // [documentation on vehicle state](https://github.com/rideOS/examples/blob/master/grpc/docs/dispatch/v2/data_model_guide.md#vehicle-state)
    // for more information on vehicle staleness.
    rpc MarkVehicleStale (MarkVehicleStaleRequest) returns (MarkVehicleStaleResponse);

    // Complete one step of the plan.
    //
    // For example, when the vehicle has arrived and picked up the passenger, call this method to complete the driving
    // to pickup step.
    rpc CompleteStep (CompleteStepRequest) returns (CompleteStepResponse);

    // Cancel an existing task, as a vehicle.
    //
    // A vehicle (rather than a passenger) may need to cancel a task if, for example, the passenger is not present
    // when the vehicle attempts to make the pickup.

    rpc CancelTask (VehicleCancelTaskRequest) returns (VehicleCancelTaskResponse);

    // Get the VehicleInfo associated with a vehicle.
    //
    // Use the VehicleInfo to indicate the number of passengers that a vehicle can carry at a time.
    rpc GetVehicleInfo (GetVehicleInfoRequest) returns (GetVehicleInfoResponse);

    // Set the VehicleInfo associated with a vehicle.
    //
    // Use the VehicleInfo to indicate the number of passengers that a vehicle can carry at a time.
    rpc SetVehicleInfo (SetVehicleInfoRequest) returns (SetVehicleInfoResponse);

    // Obtain the current plan for a given vehicle by ID.
    //
    // The vehicle is expected to call this periodically to obtain updates to its plan.
    rpc GetPlanForVehicle (GetPlanForVehicleRequest) returns (GetPlanForVehicleResponse);

    // Update the vehicle's current position.
    //
    // The vehicle is expected to call this periodically with its updated position.
    rpc SetVehiclePosition (SetVehiclePositionRequest) returns (SetVehiclePositionResponse);

    // Get a vehicle's current state.
    rpc GetVehicleState (GetVehicleStateRequest) returns (GetVehicleStateResponse);
}
