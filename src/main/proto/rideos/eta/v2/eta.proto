/***********************************************************************************************************************
 *
 * Copyright 2018-2019 rideOS, Inc.
 * rideOS confidential materials
 *
***********************************************************************************************************************/

syntax = "proto3";

package rideos.eta.v2;
option java_package = "ai.rideos.api.eta.v2";
option java_outer_classname = "EtaProto";

import "rideos/geo/v1/geo.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// EtaService
//
// The EtaService provides estimated time of arrival information
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

service EtaService {
    rpc GetEta(EtaRequest) returns (EtaResponse);
}

message EtaRequest {
    repeated Waypoint origins = 1;
    repeated Waypoint destinations = 2;

    // Optional: Time of departure from the origin. If not specified, departure time is assumed to be the time at
    // which the ETA request is processed.
    google.protobuf.Timestamp departure_time = 3;

    // Optional but recommended: IDs of the vehicles that will make the journey from the origin to the destination,
    // one per origin. By providing this, along with real-time vehicle position updates through the Vehicle Position
    // service, rideOS is able to provide ETA accuracy metrics.
    repeated string vehicle_ids = 4;

    enum CurbApproach {
        UNSPECIFIED = 0; // We will not consider the driving direction when snapping the waypoints
        DRIVING_SIDE = 1; // We will snap points according to the driving direction of the country
    }

    // Optional: Specify which side of the street the waypoints should snap to
    CurbApproach curb_approach = 5;
}

message Waypoint {
    geo.v1.Position position = 1;
    google.protobuf.FloatValue heading = 2;
}

message EtaResponse {
    repeated Waypoint origins = 1;
    repeated Waypoint destinations = 2;

    // Time of departure from the origin. Will be equal to the request's departure_time if that was set. If not, this
    // will be equal to the assumed time of departure based on when the request was processed.
    google.protobuf.Timestamp departure_time = 3;

    message TravelTimeRow {
      // Every entry encodes the travel time in seconds to the j-th destination from a given origin
      repeated double to_destination = 1;
    }

    message DistanceRow {
      // Every entry encodes the distance in meters of the path to the j-th destination from a given origin
      repeated double to_destination = 1;
    }

    // Every entry encodes the travel time from the i-th origin to all destinations.
    // As a result, `travel_time_from_origin[i].to_destination[j]` encodes the travel time from the i-th origin to the j-th destination.
    repeated TravelTimeRow travel_time_from_origin = 4;

    // Every entry encodes the distance from the i-th origin to all destinations.
    // As a result, `distance_from_origin[i].to_destination[j]` encodes the distance in meters from the i-th origin to the j-th destination.
    repeated DistanceRow distance_from_origin = 5;
}
