/*
 * Copyright 2018-2019 rideOS, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package rideos.ride_hail_notification.v1;
option java_package = "ai.rideos.api.ride_hail_notification.v1";
option objc_class_prefix = "RideHailNotification";

import "google/protobuf/timestamp.proto";

import "rideos/commons/ride_hail_commons.proto";
import "rideos/ride_hail_notification/v1/notification_common.proto";

message PullNotificationsRequest {
    uint32 max_notification_limit = 1;
}

message PullNotificationsResponse {
    repeated Notification notifications = 1;
}

message Notification {
    DeviceInfo intended_device = 1;
    string ack_id = 2;
    Event event = 3;
}

message Event {
    oneof event_type {
        RiderEvent rider_event = 1;
        DriverEvent driver_event = 2;
    }

    message RiderEvent {
        oneof event_type {
            VehicleMatchedToPassenger vehicle_matched_to_passenger = 1;
            VehicleArrivedAtPickup vehicle_arrived_at_pickup = 2;
        }

        message VehicleMatchedToPassenger {
            ride_hail_commons.VehicleInfo info = 1;
            google.protobuf.Timestamp estimated_pickup_time = 2;
        }

        message VehicleArrivedAtPickup {
            ride_hail_commons.VehicleInfo info = 1;
        }
    }

    message DriverEvent {
        oneof event_type {
            NewTripAssignment new_trip_assignment = 1;
        }

        message NewTripAssignment {
            ride_hail_commons.TripInfo trip_info = 1;
        }
    }

    // For use in the event_type oneof
    reserved 3 to 20;

    string event_id = 21;
    // Timestamp at which the event will expire
    google.protobuf.Timestamp expiration_time = 22;
}

message AckNotificationsRequest {
    repeated Ack acks = 1;
}

message Ack {
    enum AckResult {
        UNKNOWN = 0;
        SUCCESS = 1;
        FAILURE = 2;
    }
    string ack_id = 1;
    AckResult result = 2;
}

message AckNotificationsResponse {
}

service RideHailNotificationService {
    rpc PullNotifications (PullNotificationsRequest) returns (PullNotificationsResponse);

    rpc AckNotifications (AckNotificationsRequest) returns (AckNotificationsResponse);
}
